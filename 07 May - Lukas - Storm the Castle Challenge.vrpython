{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      Storm the Castle Challenge\n#\tAuthor:       Lukas Krampitz    \n#\tCreated:      07 May 2021\n#\tDescription:  Drive around and destroy castles\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n#Util function used to setup movement speeds and clear chat\ndef init():\n    #set the speed to be faster\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    brain.clear()\n\n#Moves the robot in a sequence of linear paths.\n#Accepts the number of moves\n#The axis patternt the robot will take\n#And the distances the robot will drive \ndef driveSequ(sqeuenceSize, ordList, movList):\n    #go through the secuence given\n    for i in range(sqeuenceSize):\n        #set the rotation based on X or Y axis movement\n        if ordList[i] == X:\n            drivetrain.turn_to_rotation(90, DEGREES)\n        else:\n            drivetrain.turn_to_rotation(0, DEGREES)       \n        #move the robot by the desired amounts\n        drivetrain.drive_for(FORWARD, movList[i], MM)\n\n#move the robot to a specific set of co-ordinates\ndef goTo(xPos, yPos):\n    curX = location.position(X, MM)\n    curY = location.position(Y, MM)\n\n    movX = xPos - curX\n    movY = yPos - curY\n\n    driveSequ(2, [X, Y], [movX, movY])\n\n#target specific building on the static map\ndef level1():\n    goTo(-900, 800)\n    goTo(900, 800)\n    goTo(700, -800)\n    goTo(0, 100)\n\ndef level2():\n    goTo(-600, 0) #get around the bottom corner\n    goTo(-700, 1000) #remove the right saide\n    goTo(-600, 0) #reposition\n    goTo(-900, 1000) #remove the left side\n\n#for the dynamic maps\ndef level3():\n\n    xPos = location.position(X, MM)\n    yPos = location.position(Y, MM)\n\n    #start removal loop\n    while True:\n        #get in position\n        goTo(0, -1000)\n\n        while location.position(Y, MM) < 1010:\n            #check left\n            drivetrain.turn_for(LEFT, 90, DEGREES)        \n            #check if there is a building\n            if (distance.get_distance(MM) < 2500):\n                xPos = location.position(X, MM)\n                yPos = location.position(Y, MM)\n                drivetrain.drive_for(FORWARD, 1050, MM) \n                wait(100, MSEC)              \n                goTo(xPos, yPos)\n            #recentre\n            drivetrain.turn_to_heading(0, DEGREES)\n\n            #check right\n            drivetrain.turn_to_heading(90, DEGREES)        \n            #check if there is a building\n            if (distance.get_distance(MM) < 2500):\n                xPos = location.position(X, MM)\n                yPos = location.position(Y, MM)\n                drivetrain.drive_for(FORWARD, 1050, MM) \n                wait(100, MSEC)       \n                goTo(xPos, yPos)\n            #recentre\n            drivetrain.turn_to_heading(0, DEGREES)\n\n            if (location.position(Y, MM) < 900):\n                #move forward\n                drivetrain.drive_for(FORWARD, 200, MM) \n            else:\n                drivetrain.drive_for(FORWARD, 10, MM) \n\ndef level4():\n    level3()\n\n\n# Add project code in \"main\"\ndef main():\n    init()\n\n    level4()\n\n# VR threads â€” Do not delete\nvr_thread(main())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"DynamicCastleCrasher"}