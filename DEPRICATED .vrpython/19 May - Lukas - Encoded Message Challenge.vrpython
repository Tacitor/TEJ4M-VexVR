{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      Encoded Message Challenge\n#\tAuthor:       Lukas Krampitz    \n#\tCreated:      19 May 2021\n#\tDescription:  Have the robot drive over a series of blue and green lines and read out the encoded message.\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n#Util function used to setup movement speeds and clear chat\ndef init():\n    #set the speed to be faster\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    brain.clear()\n\n#Move the VEX robot by a grid unit\ndef driveGrid(numMove):\n    drivetrain.drive_for(FORWARD, 200 * numMove, MM)\n\n#Take a List of 1s and 0s of binary and compute the deciamal value\ndef binaryToDec(array):\n    \n    output = 0\n    currIndex = 0\n\n    #go through all the indexes of the array backwards\n    for i in range( (len(array))):\n\n        #invert the value of i. Have this start at the back and end at the front of the List\n        currIndex = len(array) - 1 - i\n\n        #brain.print(\"\\n\" + str(i) + \"   \" + str(currIndex))\n\n        #If there is a 1 written there\n        if (array[currIndex] == 1):\n            #add the result of rasing 2 to the power of i \n            output = output + (pow(2,i))\n\n    return output #this is now the decimal value\n\n#My own fuction for converting to an ascii character\ndef decToAscii(num):\n\n    global alpha #list of the alphabet all in capital letters\n    alpha = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n\n    alphaVal = num\n\n    #check for a lower case number\n    if (num > 94):\n        alphaVal = alphaVal - 32\n    #get the letter (all uppercase for now)\n    alphaVal = alphaVal - 64\n\n    #error handeling and lower case correction\n    if (num < 65 or num > 122):\n        char = \"ERROR\"\n    elif (num > 94):\n        char = alpha[alphaVal - 1].lower()\n    else:\n        char = alpha[alphaVal - 1]\n\n    return char\n\ndef level1():\n\n    data = [0]*8\n\n    #go through the 8 tiles and read the value\n    for i in range(8):\n        driveGrid(1)\n\n        #red the floor value\n        if (down_eye.detect(GREEN)):\n            data[7 - i] = 1\n\n        wait(5, MSEC)\n\n    brain.print(str(data))\n\ndef level2():\n\n    data = [0]*8\n\n    #go through the 8 tiles and read the value\n    for i in range(8):\n        driveGrid(1)\n\n        #red the floor value\n        if (down_eye.detect(GREEN)):\n            data[7 - i] = 1\n\n        wait(5, MSEC)\n\n    brain.print(\"\\nBinary: \" + str(data))\n    brain.print(\"\\nDecimal: \" + str(binaryToDec(data)))\n    brain.print(\"\\nASCII: \" + str(decToAscii(binaryToDec(data))))\n\ndef level3():\n\n    finalOutput = \"\"\n\n    dist = 8\n    numColumn = 5\n\n    #go through all 5 columns\n    for j in range(numColumn):\n\n        data = [0]*dist\n\n        #go through the 8 tiles and read the value\n        for i in range(dist):\n            driveGrid(1)\n\n            #read the floor value\n            if (down_eye.detect(GREEN)):\n                data[dist - 1 - i] = 1\n\n            wait(5, MSEC)\n            drivetrain.set_rotation(0, DEGREES)\n\n        brain.print(\"\\nBinary: \" + str(data))\n        brain.print(\"\\nDecimal: \" + str(binaryToDec(data)))\n\n        ascii = str(decToAscii(binaryToDec(data)))\n\n        brain.print(\"\\nASCII: \" + str(ascii))\n        #only add it if it's not an error character\n        if (not ascii == \"ERROR\"):\n            finalOutput = finalOutput + ascii\n\n        driveGrid(-dist)\n\n        #only move it tot he next coloum if this isn't the last one\n        if (not j == (numColumn - 1)):\n            drivetrain.turn_to_heading(90, DEGREES)\n            driveGrid(2)\n            drivetrain.turn_to_heading(0, DEGREES)\n\n    brain.print(\"\\nMessage: \" + str(finalOutput))\n\ndef level4():\n\n    #test library\n    n = int('01010100011001010111001101110100', 2)\n    message = n.to_bytes((n.bit_length() + 7) // 8, 'big').decode()\n\n    brain.print(\"Output: \" + str(message))\n\n# Add project code in \"main\"\ndef main():\n    init()\n\n    level4()\n\n# VR threads â€” Do not delete\nvr_thread(main())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"EncodedMessage"}