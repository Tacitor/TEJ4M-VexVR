{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      Castle Color Match Challenge\n#\tAuthor:       Lukas Krampitz\n#\tCreated:      05 May 2021\n#\tDescription:  Have the VEXcode VR robot move and sort coloured discs around the castle court yard\n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n#Util function to move the robot forward exactly one grid quare\ndef driveGrid(numMove):\n    drivetrain.drive_for(FORWARD, 200 * numMove, MM)\n\n#Moves the robot in a sequence of linear paths.\n#Accepts the number of moves\n#The axis patternt the robot will take\n#And the distances the robot will drive \ndef driveSequ(sqeuenceSize, ordList, movList):\n    #go through the secuence given\n    for i in range(sqeuenceSize):\n        #set the rotation based on X or Y axis movement\n        if ordList[i] == X:\n            drivetrain.turn_to_rotation(90, DEGREES)\n        else:\n            drivetrain.turn_to_rotation(0, DEGREES)    \n        #move the robot by the desired grid spaces   \n        driveGrid(movList[i])\n\n#Accepts the same parameters as driveSequ(), but reverses the order and direction of the sequence\ndef driveSequRev(sqeuenceSize, ordList, movList):\n    newOrdList = [ordList[sqeuenceSize - 1]]\n    newMovList = [-movList[sqeuenceSize - 1]]\n\n    #flip the sequence\n    for i in range(sqeuenceSize - 1):\n        newOrdList.append(ordList[sqeuenceSize - 2 - i])\n        newMovList.append(-movList[sqeuenceSize - 2 - i])\n\n    driveSequ(sqeuenceSize, newOrdList, newMovList)\n\n#given a path to a disc the robot will drive there, pick it up, and return to the home base\ndef pickup(ordList, movList):\n    driveSequ(len(ordList), ordList, movList)\n    magnet.energize(BOOST)\n    driveSequRev(len(ordList), ordList, movList)\n\n#given a path to a drop off location the robot will drive there, deposit the magnet, and return to the home base\ndef dropoff(ordList, movList):\n    driveSequ(len(ordList), ordList, movList)\n    magnet.energize(DROP)\n    driveSequRev(len(ordList), ordList, movList)\n\n\ndef level1():\n    #get blue\n    pickup([Y, X], [3.5, -1.75])\n    dropoff([X], [-4])\n\n    #get red\n    pickup([Y, X], [4.5, -2.75])\n    dropoff([X], [0.25])\n\n    #get greed\n    pickup([Y, X], [3.5, 1.75])\n    dropoff([X], [4])    \n\ndef level2():\n\n    #get green\n    pickup([Y, X], [3.5, 1.75])\n    dropoff([X], [4])    \n    #get green\n    pickup([Y, X], [3.5, 2.75])\n    dropoff([X], [4]) \n    #get green\n    pickup([Y, X, Y], [4.5, -2.5, 2])\n    dropoff([X], [4])\n    #get green\n    pickup([Y, X, Y], [4.5, -1.5, 2])\n    dropoff([X], [4])\n\n    #get blue\n    pickup([Y, X, Y], [4.5, 2.5, 1])\n    dropoff([X], [-4])\n    #get blue\n    pickup([Y, X], [3.5, -1.75])\n    dropoff([X], [-4])\n    #get blue\n    pickup([Y, X], [3.5, -2.75])\n    dropoff([X], [-4])\n    #get blue\n    pickup([Y, X], [4.5, 2.75])\n    dropoff([X], [-4])\n\n    #get red\n    pickup([Y, X], [4.5, -2.75])\n    dropoff([Y], [-0.75])\n    #get red\n    pickup([Y, X, Y], [4.5, -2.5, 1])\n    dropoff([Y], [-0.75])\n    #get red\n    pickup([Y, X, Y], [4.5, 2.5, 2])\n    dropoff([Y], [-0.75])\n    #get red\n    pickup([Y, X, Y], [4.5, 1.5, 2])\n    dropoff([Y], [-0.75])\n\ndef level3():\n    #get green\n    pickup([Y, X], [3.5, 1.75])\n    dropoff([X], [4])    \n    #get green\n    pickup([Y, X], [3.5, 2.75])\n    dropoff([X], [4]) \n    #get green\n    pickup([Y, X, Y], [4.5, -2.5, 2])\n    dropoff([X], [4])\n\n    #get blue\n    pickup([Y, X, Y], [4.5, 2.5, 1])\n    dropoff([X], [-4])\n    #get blue\n    pickup([Y, X], [3.5, -1.75])\n    dropoff([X], [-4])\n    #get blue\n    pickup([Y, X], [3.5, -2.75])\n    dropoff([X], [-4])\n\n    #get red\n    pickup([Y, X], [4.5, -2.75])\n    dropoff([Y], [-0.75])\n    #get red\n    pickup([Y, X, Y], [4.5, -2.5, 1])\n    dropoff([Y], [-0.75])\n    #get red\n    pickup([Y, X, Y], [4.5, 2.5, 2])\n    dropoff([Y], [-0.75])\n\n    #hide green\n    pickup([Y, X, Y], [4.5, -1.5, 2])\n    dropoff([Y, X, Y, X], [2, -4.5, 6.6, 4])\n    #hide blue\n    pickup([Y, X], [4.5, 2.75])\n    dropoff([Y, X, Y, X], [2, -4.5, 6.6, 4])\n    #hide red\n    pickup([Y, X, Y], [4.5, 1.5, 2])\n    dropoff([Y, X, Y, X], [2, -4.5, 6.6, 4])\n    \n\n# Add project code in \"main\"\ndef main():\n    #set the speed to be faster\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n\n    level3()\n\n# VR threads â€” Do not delete\nvr_thread(main())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"Magnet"}