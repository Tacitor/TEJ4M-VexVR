{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      Color Counting Algorithms Challenge\n#\tAuthor:       Lukas Krampitz\n#\tCreated:      05 May 2021\n#\tDescription:  Have the VEXcode VR robot detect and count coloured lines on the ground\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n#Util function used to setup movement speeds\ndef init():\n    #set the speed to be faster\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n\n#Util function to move the robot forward exactly one grid quare\ndef driveGrid(numMove):\n    drivetrain.drive_for(FORWARD, 200 * numMove, MM)\n\n#Moves the robot in a sequence of linear paths.\n#Accepts the number of moves\n#The axis patternt the robot will take\n#And the distances the robot will drive \ndef driveSequ(sqeuenceSize, ordList, movList):\n    #go through the secuence given\n    for i in range(sqeuenceSize):\n        #set the rotation based on X or Y axis movement\n        if ordList[i] == X:\n            drivetrain.turn_to_rotation(90, DEGREES)\n        else:\n            drivetrain.turn_to_rotation(0, DEGREES)       \n        #move the robot by the desired grid spaces \n        driveGrid(movList[i])\n\n#Accepts the same parameters as driveSequ(), but reverses the order and direction of the sequence\ndef driveSequRev(sqeuenceSize, ordList, movList):\n    newOrdList = [ordList[sqeuenceSize - 1]]\n    newMovList = [-movList[sqeuenceSize - 1]]\n\n    #flip the sequence\n    for i in range(sqeuenceSize - 1):\n        newOrdList.append(ordList[sqeuenceSize - 2 - i])\n        newMovList.append(-movList[sqeuenceSize - 2 - i])\n\n    driveSequ(sqeuenceSize, newOrdList, newMovList)\n\ndef level1():\n    #start driving forward\n    drivetrain.drive(FORWARD)\n\n    #while driving forward cound the green lines beneath the bot\n    greenCount = 0\n    while greenCount < 2:\n        if down_eye.detect(GREEN):\n            greenCount = greenCount + 1\n\n        wait(120,MSEC)\n\n    #when 2 greens have been detected the flow breaks out of the loop and stops the bot\n    drivetrain.stop()\n\ndef level2():\n    #similar to level 1 but now detects all colours\n    drivetrain.drive(FORWARD)\n\n\n    currentColour = \"none\"\n    #drive to the end of the course\n    while location.position(Y, MM) < 900:\n        #check the line's colour\n        if down_eye.detect(GREEN) and not currentColour == \"green\":\n            currentColour = \"green\"\n            brain.print(\"green\\n\")  \n        elif down_eye.detect(RED) and not currentColour == \"red\":\n            currentColour = \"red\"\n            brain.print(\"red\\n\")  \n        elif down_eye.detect(BLUE) and not currentColour == \"blue\":\n            currentColour = \"blue\"\n            brain.print(\"blue\\n\")\n        elif down_eye.detect(NONE) and not currentColour == \"none\":\n            currentColour = \"none\"     \n        \n\n        wait(10,MSEC)\n\n    drivetrain.stop()\n\ndef level3():\n    #same as level 2, but now keep track of the colours counted\n    drivetrain.drive(FORWARD)\n\n    #temp val storage\n    currentColour = \"none\"\n    #accumulators\n    total = 0\n    red = 0\n    blue = 0\n    green = 0\n    #drive to the end of the course\n    while location.position(Y, MM) < 900:\n        if down_eye.detect(GREEN) and not currentColour == \"green\":\n            currentColour = \"green\"\n            green+=1 #increment by 1\n        elif down_eye.detect(RED) and not currentColour == \"red\":\n            currentColour = \"red\"\n            red+=1\n        elif down_eye.detect(BLUE) and not currentColour == \"blue\":\n            currentColour = \"blue\"\n            blue+=1\n        elif down_eye.detect(NONE) and not currentColour == \"none\":\n            currentColour = \"none\"   \n            total+=1  \n        \n\n        wait(10,MSEC)\n\n    drivetrain.stop()\n\n    #display the output\n    brain.print(\"Total RGB lines:\" + str(total) + \"\\n\")\n    brain.print(\"Total red lines:\" + str(red) + \"\\n\")\n    brain.print(\"Total green lines:\" + str(green) + \"\\n\")\n    brain.print(\"Total blue lines:\" + str(blue) + \"\\n\")\n\n\n# Add project code in \"main\"\ndef main():\n    init()\n\n    level2()\n\n\n\n# VR threads â€” Do not delete\nvr_thread(main())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"LineDetector"}