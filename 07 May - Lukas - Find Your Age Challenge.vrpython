{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      Find Your Age Challenge\n#\tAuthor:       Lukas Krampitz\n#\tCreated:      07 May 2021\n#\tDescription:  Have the VEXcode VR robot move to grid squares regarding my age\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n#Util function used to setup movement speeds and clear chat\ndef init():\n    #set the speed to be faster\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    brain.clear()\n\n#Util function to move the robot forward exactly one grid quare\ndef driveGrid(numMove):\n    drivetrain.drive_for(FORWARD, 200 * numMove, MM)\n\n#Moves the robot in a sequence of linear paths.\n#Accepts the number of moves\n#The axis patternt the robot will take\n#And the distances the robot will drive \ndef driveSequ(sqeuenceSize, ordList, movList):\n    #go through the secuence given\n    for i in range(sqeuenceSize):\n        #set the rotation based on X or Y axis movement\n        if ordList[i] == X:\n            drivetrain.turn_to_rotation(90, DEGREES)\n        else:\n            drivetrain.turn_to_rotation(0, DEGREES)       \n        #move the robot by the desired amounts\n        drivetrain.drive_for(FORWARD, movList[i], MM)\n\n#Accepts the same parameters as driveSequ(), but reverses the order and direction of the sequence\ndef driveSequRev(sqeuenceSize, ordList, movList):\n    newOrdList = [ordList[sqeuenceSize - 1]]\n    newMovList = [-movList[sqeuenceSize - 1]]\n\n    #flip the sequence\n    for i in range(sqeuenceSize - 1):\n        newOrdList.append(ordList[sqeuenceSize - 2 - i])\n        newMovList.append(-movList[sqeuenceSize - 2 - i])\n\n    driveSequ(sqeuenceSize, newOrdList, newMovList)\n\n#Given the co-ords of a point, navigate the robot to it\ndef goTo(xPos, yPos):\n    #find out where the robot is right now\n    curX = location.position(X, MM)\n    curY = location.position(Y, MM)\n\n    #calculate ho much it need to move\n    movX = xPos - curX\n    movY = yPos - curY\n\n    #hand off the drive sequence\n    driveSequ(2, [X, Y], [movX, movY])\n\n#Util function to calculate the number that will be on a grid sqare based on it's co-ordinates\ndef getGridNum(xPos, yPos):\n    #convert the raw co-ords to an internal grid co-ord system\n    gridX = ((xPos + 900) / 200) + 1\n    gridY = ((yPos + 900) / 200) + 1\n\n    #use the x and y positions of the grid sqares to calculate the number that apears on the square\n    if gridX == 10:\n        num = gridX * gridY\n    else:\n        num = ((gridY - 1) * 10) + gridX\n\n    return num\n\n#Another until method that takes a single number and computed the raw co-ords of the square it appears on\ndef getCoords(gridNum):\n    #exeption for multiples of 10\n    if gridNum % 10 == 0:\n        coords = [10, gridNum / 10]\n    else: #extracts the ones and tens coloumn to get the interal x and y to then be converted to the raw co-ords\n        coordX = gridNum % 10\n        coordY = ((gridNum - coordX ) / 10) + 1\n\n        coords = [coordX,coordY]\n\n    destX = ((coords[0] - 1) * 200) - 900\n    destY = ((coords[1] - 1) * 200) - 900\n\n    dest = [destX, destY]\n\n    return dest\n\n#put a small linear pen mark of the ground\ndef markSquare():\n    #lower pen\n    pen.move(DOWN)\n    #make the mark\n    drivetrain.drive_for(FORWARD, 50, MM)\n    #return back to initial position\n    drivetrain.drive_for(FORWARD, -50, MM)\n    #raise the pen again \n    pen.move(UP)\n\ndef level1():\n    #get the co-ordinates of the destination square\n    coords = getCoords(18)\n    #hand them off to the movement function\n    goTo(coords[0], coords[1])\n\ndef level2():\n\n    coords = getCoords(18)\n\n    goTo(coords[0], coords[1])\n\n    coords = getCoords(2035 - 2003)\n\n    goTo(coords[0], coords[1])\n\ndef level3():\n\n    coords = getCoords(31)\n\n    goTo(coords[0], coords[1])\n    \n    pen.set_pen_color(BLUE)\n    markSquare() #put a mark on the square\n\n    coords = getCoords(1)\n\n    goTo(coords[0], coords[1])\n    pen.set_pen_color(RED)\n    markSquare()\n\n    coords = getCoords(3)\n\n    goTo(coords[0], coords[1])\n    pen.set_pen_color(GREEN)\n    markSquare()\n\ndef level4(destNum):\n\n    coords = getCoords(destNum)\n\n    goTo(coords[0], coords[1])\n\n\n# Add project code in \"main\"\ndef main():\n    init()\n\n    level4(78)\n\n\n# VR threads â€” Do not delete\nvr_thread(main())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"Number"}