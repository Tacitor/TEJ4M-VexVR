{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\ndef init():\n    #set the speed to be faster\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    brain.clear()\n\n\ndef driveGrid(numMove):\n    drivetrain.drive_for(FORWARD, 200 * numMove, MM)\n\ndef cycleList(aList):\n\n    #brain.print(\"\\nIn: \" + str(aList))\n\n    tempVal = aList[0]\n    aList.append(tempVal)\n    aList.pop(0)\n\n    #brain.print(\"\\nOut: \" + str(aList))\n    return aList\n\ndef driveSequ(sqeuenceSize, ordList, movList):\n    for i in range(sqeuenceSize):\n        if ordList[i] == X:\n            drivetrain.turn_to_rotation(90, DEGREES)\n        else:\n            drivetrain.turn_to_rotation(0, DEGREES)       \n        drivetrain.drive_for(FORWARD, movList[i], MM)\n\ndef goTo(xPos, yPos):\n    curX = location.position(X, MM)\n    curY = location.position(Y, MM)\n\n    movX = xPos - curX\n    movY = yPos - curY\n\n    #check for 1D movemnt\n    if (movX == 0):\n        driveSequ(1, [Y], [movY])\n    elif (movY == 0):\n        driveSequ(1, [X], [movX])\n    else:\n        driveSequ(2, [X, Y], [movX, movY])\n\ndef getPos():\n\n    curCoords = [location.position(X, MM), location.position(Y, MM)]\n\n    return curCoords\n\ndef printArt(array):\n\n    output = \"Art\\n\"\n\n    for i in range(len(array)):\n\n        for j in range(len(array)):\n\n            output = output + str(array[i][j]) + \" \"\n\n        output = output + \"\\n\"\n\n    brain.print(output)\n\ndef level3():\n\n    offChar = \"0\"\n    onChar = \"◘\"\n    gridSize = 7 \n\n    global art\n    art = [[offChar]]\n\n    #create the 2D array with all 0s\n    for i in range(gridSize): #have 8 rows\n    \n        art.append([offChar])\n\n        #add the columns\n        for j in range(gridSize):\n            art[i].append(offChar)\n\n    #add the last row\n    for j in range(gridSize):\n        art[gridSize].append(offChar)\n\n    monitor_variable(\"art\")\n\n\n    #go through all the positions under the gold roofs\n\n    #move to starting pos\n    goTo(-900, 900)\n\n    #scan the column\n    for i in range(8):\n\n        drivetrain.turn_to_heading(180, DEGREES)\n        driveGrid(1)\n\n        #scan the row\n        drivetrain.turn_to_heading(90, DEGREES)\n        for j in range(8):\n            driveGrid(1)\n            \n            #check if the tile is \"filled\"\n            if (down_eye.detect(GREEN)):\n                art[i][j] = onChar\n\n            wait(5, MSEC)\n        #go back\n        driveGrid(-8)\n\n    #print the art\n    printArt(art)\n\n# Add project code in \"main\"\ndef main():\n    init()\n\n    level3()\n\n# VR threads — Do not delete\nvr_thread(main())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"HiddenPixelArt"}